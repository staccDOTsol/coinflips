{"version":3,"sources":["constants.ts","dice-instructions.ts","transactions.ts","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils.ts"],"names":["HOUSE_PROGRAM_ID","PublicKey","PREFIX","FEES","TREASURY","jare","house","DEFAULT_TIMEOUT","initializeCoin","walletKeyPair","uuid","a","loadHouseProgram","puppetMaster","getPlayerAccount","newPuppetAccount","newPuppetAccountBump","instruction","initialize","accounts","puppet","user","publicKey","systemProgram","SystemProgram","programId","recentBlockhashes","anchor","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","signers","mintCoin","bet","account","fetch","houseObj","pullStrings","author","authorFeeAccount","operator","operatorFeeAccount","operatorTreasury","remainingAccounts","pubkey","isSigner","isWritable","sendTransactionWithRetryWithKeypair","connection","wallet","instructions","commitment","includesFeePayer","block","transaction","Transaction","forEach","add","getRecentBlockhash","recentBlockhash","blockhash","setSigners","map","s","signTransaction","sendSignedTransaction","signedTransaction","txid","slot","timeout","rawTransaction","serialize","startTime","getUnixTs","sendRawTransaction","skipPreflight","log","debug","done","sleep","awaitTransactionSignatureConfirmation","confirmation","Error","err","error","simulateResult","simulateTransaction","value","logs","i","length","line","startsWith","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","message","result","queryStatus","status","confirmations","subId","Promise","resolve","reject","setTimeout","warn","onSignature","context","e","getSignatureStatuses","signatureStatuses","_signatureSubscriptions","removeSignatureListener","Stage","ConnectButton","styled","WalletDialogButton","solConnection","Connection","first","oldBal","Item","Paper","theme","typography","body2","padding","spacing","textAlign","color","palette","text","secondary","Home","useState","balance","setBalance","setBet","useAnchorWallet","PreBet","stage","setStage","setUuid","msg","setMsg","setStatus","initStage","RevealPending","localUuid","uuidv4","push","axios","get","params","player","toBase58","env","resp","localMsg","data","indexOf","setInterval","wallet2","getBalance","balance2","console","LAMPORTS_PER_SOL","newBal","useEffect","className","toLocaleString","Grid","container","item","xs","FormControl","fullWidth","sx","m","variant","InputLabel","htmlFor","FilledInput","type","autoFocus","inputProps","id","onChange","num","parseFloat","target","startAdornment","InputAdornment","position","Button","onClick","network","process","createTheme","overrides","MuiButtonBase","root","justifyContent","MuiButton","textTransform","undefined","startIcon","marginRight","endIcon","marginLeft","App","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","autoConnect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","walletWrapper","provider","preflightCommitment","fetchIdl","idl","findProgramAddress","Buffer","from","toBuffer","ms","Date","getTime"],"mappings":"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","file":"static/js/main.ed642155.chunk.js","sourcesContent":["import {PublicKey} from '@solana/web3.js'\r\nexport const HOUSE_PROGRAM_ID = new PublicKey(\"9pJ55KszBGk1Td3LbRrWLszAaiXg7YLW5oouLABJwsZg\");\r\nexport const PREFIX = 'rng_house';\r\nexport const FEES = \"fees\";\r\nexport const TREASURY = 'treasury';\r\nexport const jare = \"4tui4yfA6MNgLhjXmKBATrPvEUGseEeqQrqAyVHintUQ\";\r\nexport const author = new PublicKey(jare);\r\nexport const house = new PublicKey(\"ASTu9TrWQkQL693SzAZ2533f871WUP3RxkW9y6nLGP9L\");\r\nexport const DEFAULT_TIMEOUT = 30000;\r\n","import {AnchorWallet} from \"@solana/wallet-adapter-react\";\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport {PublicKey, SystemProgram, TransactionInstruction} from \"@solana/web3.js\";\r\nimport {getPlayerAccount, loadHouseProgram} from \"./utils\";\r\nimport {house, jare } from \"./constants\";\r\n\r\nexport const initializeCoin = async (walletKeyPair: AnchorWallet, house: PublicKey, uuid: string): Promise<TransactionInstruction> => {\r\n  const puppetMaster = await loadHouseProgram(walletKeyPair);\r\n  // window.localStorage.setItem('uuid', uuid);\r\n  const [newPuppetAccount, newPuppetAccountBump] = await getPlayerAccount(walletKeyPair, house, uuid);\r\n  return puppetMaster.instruction.initialize(\r\n      newPuppetAccountBump,\r\n      uuid, {\r\n    accounts: {\r\n      puppet: newPuppetAccount,\r\n      user: walletKeyPair.publicKey,\r\n      systemProgram: SystemProgram.programId,\r\n      recentBlockhashes: anchor.web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\r\n      house: house,\r\n    },\r\n    signers: [],\r\n  });\r\n};\r\n\r\nexport const revealCoin = async (walletKeyPair: AnchorWallet, jare: PublicKey, uuid: string): Promise<TransactionInstruction> => {\r\n  // const uuid = window.localStorage.getItem('uuid');\r\n  const [newPuppetAccount, newPuppetAccountBump] = await getPlayerAccount(walletKeyPair, house, uuid!);\r\n  const puppetMaster = await loadHouseProgram(walletKeyPair);\r\n  const houseObj = await puppetMaster.account.house.fetch(house);\r\n  return puppetMaster.instruction.uncover({\r\n          accounts: {\r\n            // @ts-ignore\r\n            author: houseObj.author,\r\n            // @ts-ignore\r\n            authorFeeAccount: houseObj.authorFeeAccount,\r\n            // @ts-ignore\r\n            operator: houseObj.operator,\r\n            // @ts-ignore\r\n            authorFeeAccount: houseObj.authorFeeAccount,\r\n            // @ts-ignore\r\n            operatorFeeAccount: houseObj.operatorFeeAccount,\r\n            house: house,\r\n            puppet: newPuppetAccount,\r\n            // @ts-ignore\r\n            operatorTreasury: houseObj.operatorTreasury,\r\n            recentBlockhashes: anchor.web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\r\n            jare: jare,\r\n            user: walletKeyPair.publicKey,\r\n            systemProgram: SystemProgram.programId,\r\n          }, remainingAccounts: [\r\n            {\r\n              // @ts-ignore\r\n              pubkey: houseObj.operatorTreasury,\r\n              isSigner: false,\r\n              isWritable: true,\r\n            }\r\n          ],\r\n          signers: [],\r\n\r\n        },\r\n    );\r\n}\r\n\r\nexport const mintCoin = async (walletKeyPair: AnchorWallet, bet: number, uuid: string): Promise<TransactionInstruction> => {\r\n  // const uuid = window.localStorage.getItem('uuid');\r\n  const [newPuppetAccount, newPuppetAccountBump] = await getPlayerAccount(walletKeyPair, house, uuid!);\r\n  const puppetMaster = await loadHouseProgram(walletKeyPair);\r\n  const houseObj = await puppetMaster.account.house.fetch(house);\r\n  return puppetMaster.instruction.pullStrings(new anchor.BN(bet * 10 ** 9), {\r\n        accounts: {\r\n          // @ts-ignore\r\n          author: houseObj.author,\r\n          // @ts-ignore\r\n          authorFeeAccount: houseObj.authorFeeAccount,\r\n          // @ts-ignore\r\n          operator: houseObj.operator,\r\n          // @ts-ignore\r\n          authorFeeAccount: houseObj.authorFeeAccount,\r\n          // @ts-ignore\r\n          operatorFeeAccount: houseObj.operatorFeeAccount,\r\n          // @ts-ignore\r\n          house: house,\r\n          // @ts-ignore\r\n          puppet: newPuppetAccount,\r\n          // @ts-ignore\r\n          operatorTreasury: houseObj.operatorTreasury,\r\n          recentBlockhashes: anchor.web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\r\n          jare: jare,\r\n          // @ts-ignore\r\n          user: walletKeyPair.publicKey,\r\n          systemProgram: SystemProgram.programId,\r\n        }, remainingAccounts: [\r\n          {\r\n            // @ts-ignore\r\n            pubkey: houseObj.operatorTreasury,\r\n            isSigner: false,\r\n            isWritable: true,\r\n          }\r\n        ],\r\n        signers: [],\r\n      },\r\n  );\r\n}\r\n","import {\r\n  Blockhash,\r\n  Commitment,\r\n  Connection,\r\n  FeeCalculator,\r\n  Keypair,\r\n  RpcResponseAndContext,\r\n  SignatureStatus,\r\n  SimulatedTransactionResponse,\r\n  Transaction,\r\n  TransactionInstruction,\r\n  TransactionSignature,\r\n} from '@solana/web3.js';\r\nimport { DEFAULT_TIMEOUT } from './constants';\r\nimport log from 'loglevel';\r\nimport {AnchorWallet} from \"@solana/wallet-adapter-react\";\r\nimport {sleep, getUnixTs} from \"./utils\";\r\n\r\ninterface BlockhashAndFeeCalculator {\r\n  blockhash: Blockhash;\r\n  feeCalculator: FeeCalculator;\r\n}\r\n\r\nexport const sendTransactionWithRetryWithKeypair = async (\r\n    connection: Connection,\r\n    wallet: AnchorWallet,\r\n    instructions: TransactionInstruction[],\r\n    signers: Keypair[],\r\n    commitment: Commitment = 'confirmed',\r\n    includesFeePayer: boolean = false,\r\n    block?: BlockhashAndFeeCalculator,\r\n    beforeSend?: () => void,\r\n) => {\r\n  const transaction = new Transaction();\r\n  instructions.forEach(instruction => transaction.add(instruction));\r\n  transaction.recentBlockhash = (\r\n      block || (await connection.getRecentBlockhash(commitment))\r\n  ).blockhash;\r\n\r\n  if (includesFeePayer) {\r\n    transaction.setSigners(...signers.map(s => s.publicKey));\r\n  } else {\r\n    transaction.setSigners(\r\n        // fee payed by the wallet owner\r\n        wallet.publicKey,\r\n        ...signers.map(s => s.publicKey),\r\n    );\r\n  }\r\n\r\n  // if (signers.length > 0) {\r\n  //   transaction.sign(...[wallet, ...signers]);\r\n  // } else {\r\n  //   transaction.sign(wallet);\r\n  // }\r\n  //\r\n  // if (beforeSend) {\r\n  //   beforeSend();\r\n  // }\r\n  await wallet?.signTransaction(transaction);\r\n  const { txid, slot } = await sendSignedTransaction({\r\n    connection,\r\n    signedTransaction: transaction,\r\n  });\r\n\r\n  return { txid, slot };\r\n};\r\n\r\nexport async function sendSignedTransaction({\r\n                                              signedTransaction,\r\n                                              connection,\r\n                                              timeout = DEFAULT_TIMEOUT,\r\n                                            }: {\r\n  signedTransaction: Transaction;\r\n  connection: Connection;\r\n  sendingMessage?: string;\r\n  sentMessage?: string;\r\n  successMessage?: string;\r\n  timeout?: number;\r\n}): Promise<{ txid: string; slot: number }> {\r\n  const rawTransaction = signedTransaction.serialize();\r\n  const startTime = getUnixTs();\r\n  let slot = 0;\r\n  const txid: TransactionSignature = await connection.sendRawTransaction(\r\n      rawTransaction,\r\n      {\r\n        skipPreflight: true,\r\n      },\r\n  );\r\n\r\n  log.debug('Started awaiting confirmation for', txid);\r\n\r\n  let done = false;\r\n  (async () => {\r\n    while (!done && getUnixTs() - startTime < timeout) {\r\n      connection.sendRawTransaction(rawTransaction, {\r\n        skipPreflight: true,\r\n      });\r\n      await sleep(500);\r\n    }\r\n  })();\r\n  try {\r\n    const confirmation = await awaitTransactionSignatureConfirmation(\r\n        txid,\r\n        timeout,\r\n        connection,\r\n        'confirmed',\r\n        true,\r\n    );\r\n\r\n    if (!confirmation)\r\n      throw new Error('Timed out awaiting confirmation on transaction');\r\n\r\n    if (confirmation.err) {\r\n      log.error(confirmation.err);\r\n      throw new Error('Transaction failed: Custom instruction error');\r\n    }\r\n\r\n    slot = confirmation?.slot || 0;\r\n  } catch (err) {\r\n    log.error('Timeout Error caught', err);\r\n    if (err.timeout) {\r\n      throw new Error('Timed out awaiting confirmation on transaction');\r\n    }\r\n    let simulateResult: SimulatedTransactionResponse | null = null;\r\n    try {\r\n      simulateResult = (\r\n          await simulateTransaction(connection, signedTransaction, 'single')\r\n      ).value;\r\n    } catch (e) {\r\n      log.error('Simulate Transaction error', e);\r\n    }\r\n    if (simulateResult && simulateResult.err) {\r\n      if (simulateResult.logs) {\r\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\r\n          const line = simulateResult.logs[i];\r\n          if (line.startsWith('Program log: ')) {\r\n            throw new Error(\r\n                'Transaction failed: ' + line.slice('Program log: '.length),\r\n            );\r\n          }\r\n        }\r\n      }\r\n      throw new Error(JSON.stringify(simulateResult.err));\r\n    }\r\n    log.error('Got this far.');\r\n    // throw new Error('Transaction failed');\r\n  } finally {\r\n    done = true;\r\n  }\r\n\r\n  log.debug('Latency (ms)', txid, getUnixTs() - startTime);\r\n  return { txid, slot };\r\n}\r\n\r\nasync function simulateTransaction(\r\n    connection: Connection,\r\n    transaction: Transaction,\r\n    commitment: Commitment,\r\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\r\n  // @ts-ignore\r\n  transaction.recentBlockhash = await connection._recentBlockhash(\r\n      // @ts-ignore\r\n      connection._disableBlockhashCaching,\r\n  );\r\n\r\n  const signData = transaction.serializeMessage();\r\n  // @ts-ignore\r\n  const wireTransaction = transaction._serialize(signData);\r\n  const encodedTransaction = wireTransaction.toString('base64');\r\n  const config: any = { encoding: 'base64', commitment };\r\n  const args = [encodedTransaction, config];\r\n\r\n  // @ts-ignore\r\n  const res = await connection._rpcRequest('simulateTransaction', args);\r\n  if (res.error) {\r\n    throw new Error('failed to simulate transaction: ' + res.error.message);\r\n  }\r\n  return res.result;\r\n}\r\n\r\nasync function awaitTransactionSignatureConfirmation(\r\n    txid: TransactionSignature,\r\n    timeout: number,\r\n    connection: Connection,\r\n    commitment: Commitment = 'confirmed',\r\n    queryStatus = false,\r\n): Promise<SignatureStatus | null | void> {\r\n  let done = false;\r\n  let status: SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  let subId = 0;\r\n  // eslint-disable-next-line no-async-promise-executor\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      log.warn('Rejecting for timeout...');\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n    try {\r\n      subId = connection.onSignature(\r\n          txid,\r\n          (result, context) => {\r\n            done = true;\r\n            status = {\r\n              err: result.err,\r\n              slot: context.slot,\r\n              confirmations: 0,\r\n            };\r\n            if (result.err) {\r\n              log.warn('Rejected via websocket', result.err);\r\n              reject(status);\r\n            } else {\r\n              log.debug('Resolved via websocket', result);\r\n              resolve(status);\r\n            }\r\n          },\r\n          commitment,\r\n      );\r\n    } catch (e) {\r\n      done = true;\r\n      log.error('WS error in setup', txid, e);\r\n    }\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              log.debug('REST null result for', txid, status);\r\n            } else if (status.err) {\r\n              log.error('REST error for', txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              log.debug('REST no confirmations for', txid, status);\r\n            } else {\r\n              log.debug('REST confirmation for', txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            log.error('REST connection error: txid', txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  if (connection._signatureSubscriptions[subId])\r\n    connection.removeSignatureListener(subId);\r\n  done = true;\r\n  log.debug('Returning status', status);\r\n  return status;\r\n}\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {Connection, LAMPORTS_PER_SOL, PublicKey} from \"@solana/web3.js\";\r\nimport {useAnchorWallet} from \"@solana/wallet-adapter-react\";\r\nimport {initializeCoin, mintCoin, revealCoin} from \"./dice-instructions\";\r\nimport {house, jare} from \"./constants\";\r\nimport {sendTransactionWithRetryWithKeypair} from \"./transactions\";\r\nimport { styled } from '@mui/material/styles';\r\nimport {WalletDialogButton} from \"@solana/wallet-adapter-material-ui\";\r\nimport Paper from '@mui/material/Paper';\r\nimport Grid from '@mui/material/Grid';\r\nimport {Button, FilledInput, FormControl, InputAdornment, InputLabel} from \"@mui/material\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport axios from \"axios\";\r\nimport Popup from \"./Popup\";\r\nconst ConnectButton = styled(WalletDialogButton)``;\r\nconst solConnection = new Connection(\"https://psytrbhymqlkfrhudd.dev.genesysgo.net:8899/\");\r\nlet first = true;\r\nlet  oldBal = 0;\r\n// @ts-ignore\r\nconst Item = styled(Paper)(({ theme }) => ({\r\n  ...theme.typography.body2,\r\n  padding: theme.spacing(1),\r\n  textAlign: 'center',\r\n  color: theme.palette.text.secondary,\r\n}));\r\n\r\nenum Stage {\r\n  PreBet,\r\n  RevealPending\r\n}\r\n\r\nconst Home = () => {\r\n  const [balance, setBalance] = useState<number>();\r\n  const [bet, setBet] = useState<number>(0.2);\r\n  const wallet = useAnchorWallet();\r\n  const [stage, setStage] = useState<Stage>(Stage.PreBet);\r\n  const [uuid, setUuid] = useState<string|null>(null);\r\n  const [msg, setMsg] = useState<string>(\"\");\r\n  const [status, setStatus] = useState<boolean>(false);\r\n  \r\n  const setBetAmount = (e: any) => {\r\n    //console.log(\"bet e.target.value \", e.target.value)\r\n    try {\r\n      const num = parseFloat(e.target.value);\r\n      if (num >= 1) {\r\n        setTimeout(\r\n            () => setStatus(true),\r\n            500\r\n        );\r\n        setBet(1);\r\n      } else if (num <= 0.1) {\r\n        setTimeout(\r\n            () => setStatus(true),\r\n            500\r\n        );\r\n        setBet(0.1);\r\n      } else {\r\n        setBet(num);\r\n      }\r\n    } catch (e) {\r\n      setTimeout(\r\n          () => setStatus(true),\r\n          500\r\n      );\r\n    }\r\n  }\r\n\r\n  const initStage = async () => {\r\n    if (!wallet) return;\r\n    if (!bet) return;\r\n    // @ts-ignore\r\n    \r\n    oldBal = balance;\r\n    setMsg('');\r\n    setStage(Stage.RevealPending);\r\n    const instructions = [];\r\n    const localUuid = uuidv4().slice(0, 8);\r\n    setUuid(localUuid);\r\n    instructions.push(await initializeCoin(wallet, house, localUuid));\r\n    instructions.push(await mintCoin(wallet, bet, localUuid));\r\n    const txn = await sendTransactionWithRetryWithKeypair(solConnection, wallet, instructions, [], 'singleGossip', false);\r\n   // @ts-ignore\r\n    setBalance(balance - bet);\r\n    //console.log(\"txn num \", txn);\r\n    \r\n    const resp = await axios.get('https://warm-river-90393.herokuapp.com/reveal', { params: { player: wallet.publicKey.toBase58(), uuid: localUuid, env: \"devnet\" }});\r\n    //console.log(\"resp \", resp)\r\n\r\n\r\n    let localMsg = \"You \" + resp.data.status + '!';\r\n    if (resp.data.status.indexOf('won') != -1){\r\n         // @ts-ignore\r\n      setBalance(balance + bet * 2)\r\n    }\r\n    //console.log(\"localMsg \", localMsg);\r\n    setMsg(localMsg);\r\n    setStage(Stage.PreBet);\r\n    setTimeout(\r\n      async function () {\r\n        setStatus(true)\r\n      }, 500)\r\n      if (wallet && first){\r\n        first = false;\r\n      setInterval(\r\n          \r\n        // @ts-ignore\r\n         async function newBal(wallet2?) {\r\n           try {\r\n           // @ts-ignore\r\n       const balance2 = await solConnection.getBalance(wallet.publicKey ? wallet.publicKey : wallet2.publicKey);\r\n     // @ts-ignore\r\n       if (balance2 != oldBal){\r\n       oldBal = balance2;\r\n       console.log(balance2 / LAMPORTS_PER_SOL)\r\n           setBalance(balance2 / LAMPORTS_PER_SOL);\r\n          }\r\n    }\r\n    catch(err){\r\n      setTimeout(await newBal, 1000)\r\n    }\r\n         }, 1000)\r\n        }\r\n  }\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (wallet) {\r\n        const balance = await solConnection.getBalance(wallet.publicKey);\r\n        setBalance(balance / LAMPORTS_PER_SOL);\r\n      }\r\n    })();\r\n  }, [wallet]);\r\n\r\n\r\n  return (\r\n      <>\r\n        <main className=\"container\">\r\n          {wallet && <p className=\"pp\">Balance: {(balance || 0).toLocaleString()} SOL</p>}\r\n          {!wallet &&  <ConnectButton>Connect Wallet</ConnectButton>}\r\n          {wallet && stage == Stage.PreBet && <div>\r\n            <Grid container spacing={0}>\r\n              <Grid item xs={4}></Grid>\r\n              <Grid item xs={4}>\r\n                <Item>\r\n                  <FormControl fullWidth sx={{ m: 1 }} variant=\"filled\">\r\n                    <InputLabel htmlFor=\"filled-adornment-amount\">Amount</InputLabel>\r\n                    <FilledInput\r\n                        type={\"number\"}\r\n                        autoFocus={true}\r\n                        inputProps={{\"step\": 0.1}}\r\n                        id=\"filled-adornment-amount\"\r\n                        value={bet}\r\n                        onChange={setBetAmount}\r\n                        startAdornment={<InputAdornment position=\"start\">Bet:</InputAdornment>}\r\n                    />\r\n                  </FormControl>\r\n                </Item>\r\n                <Item>\r\n                  <Button variant=\"outlined\" onClick={initStage}>Flip Coin</Button>\r\n                </Item>\r\n              </Grid>\r\n              <Grid item xs={4}></Grid>\r\n            </Grid>\r\n          \r\n            </div>}\r\n          {wallet && stage == Stage.RevealPending && <div>\r\n            <Grid container spacing={0}>\r\n              <Grid item xs={4}></Grid>\r\n              <Grid item xs={4}>\r\n                  <h1>Flipping & revealing...</h1>\r\n              </Grid>\r\n              <Grid item xs={4}></Grid>\r\n            </Grid>\r\n          </div>}\r\n            <Grid container spacing={0}>\r\n              <Grid item xs={4}></Grid>\r\n          <Grid item xs={4}>\r\n            <h2 className=\"pp\">{msg}</h2>\r\n          </Grid>\r\n              <Grid item xs={4}></Grid></Grid>\r\n        </main>\r\n      </>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import \"./App.css\";\r\nimport { useMemo } from \"react\";\r\n\r\nimport Home from \"./Home\";\r\n\r\nimport { clusterApiUrl } from \"@solana/web3.js\";\r\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\r\nimport {\r\n  getPhantomWallet,\r\n  getSlopeWallet,\r\n  getSolflareWallet,\r\n  getSolletWallet,\r\n  getSolletExtensionWallet,\r\n} from \"@solana/wallet-adapter-wallets\";\r\n\r\nimport {\r\n  ConnectionProvider,\r\n  WalletProvider,\r\n} from \"@solana/wallet-adapter-react\";\r\n\r\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\r\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\r\n\r\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\r\n\r\nconst theme = createTheme({\r\n    palette: {\r\n        type: 'dark',\r\n    },\r\n    overrides: {\r\n        MuiButtonBase: {\r\n            root: {\r\n                justifyContent: 'flex-start',\r\n            },\r\n        },\r\n        MuiButton: {\r\n            root: {\r\n                textTransform: undefined,\r\n                padding: '12px 16px',\r\n            },\r\n            startIcon: {\r\n                marginRight: 8,\r\n            },\r\n            endIcon: {\r\n                marginLeft: 8,\r\n            },\r\n        },\r\n    },\r\n});\r\n\r\nconst App = () => {\r\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\r\n\r\n  const wallets = useMemo(\r\n    () => [\r\n        getPhantomWallet(),\r\n        getSlopeWallet(),\r\n        getSolflareWallet(),\r\n        getSolletWallet({ network }),\r\n        getSolletExtensionWallet({ network })\r\n    ],\r\n    []\r\n  );\r\n\r\n  return (\r\n      <ThemeProvider theme={theme}>\r\n        <ConnectionProvider endpoint={endpoint}>\r\n          <WalletProvider wallets={wallets} autoConnect={true}>\r\n            <WalletDialogProvider>\r\n              <Home/>\r\n            </WalletDialogProvider>\r\n          </WalletProvider>\r\n        </ConnectionProvider>\r\n      </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import {AnchorWallet} from \"@solana/wallet-adapter-react\";\r\nimport {Connection, PublicKey} from \"@solana/web3.js\";\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport {FEES, HOUSE_PROGRAM_ID, PREFIX, TREASURY} from \"./constants\";\r\n\r\nexport async function loadHouseProgram(walletWrapper: AnchorWallet) {\r\n  const solConnection = new Connection(\"https://solana--devnet.datahub.figment.io/apikey/36eb346d92b67d8fd9046b02347b13f1\");\r\n  const provider = new anchor.Provider(solConnection, walletWrapper, {\r\n    preflightCommitment: 'confirmed', commitment: 'confirmed'\r\n  });\r\n  const idl = await anchor.Program.fetchIdl(\r\n      HOUSE_PROGRAM_ID,\r\n      provider,\r\n  );\r\n\r\n  // const idl = await anchor.Program.fetchIdl(HOUSE_PROGRAM_ID, provider);\r\n\r\n  return new anchor.Program(idl, HOUSE_PROGRAM_ID, provider);\r\n}\r\n\r\nexport async function getHouse(author: PublicKey, operator: PublicKey) {\r\n  // #[account(init, seeds=[PREFIX.as_bytes(), author.key().as_ref(), operator.key().as_ref()], bump=house_bump, space=HOUSE_SIZE, payer=author)]\r\n  // house: Account<'info, House>,\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n      [Buffer.from(PREFIX),\r\n        author.toBuffer(),\r\n        operator.toBuffer()],\r\n      HOUSE_PROGRAM_ID,\r\n  );\r\n}\r\n\r\n\r\nexport async function getAuthorFeeAccount(house: PublicKey, author: PublicKey, operator: PublicKey) {\r\n  // #[account(mut, seeds=[PREFIX.as_bytes(), FEES.as_bytes(), house.key().as_ref(), author.key.as_ref(), operator.key.as_ref()], bump=author_fee_bump)]\r\n  // author_fee_account: UncheckedAccount<'info>,\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from(PREFIX),\r\n        Buffer.from(FEES),\r\n        house.toBuffer(),\r\n        author.toBuffer(),\r\n        operator.toBuffer(),\r\n      ],\r\n      HOUSE_PROGRAM_ID,\r\n  );\r\n}\r\n\r\n\r\nexport async function getOperatorTreasuryAccount(house: PublicKey, author: PublicKey, operator: PublicKey) {\r\n  // #[account(mut, seeds=[PREFIX.as_bytes(), TREASURY.as_bytes(), house.key().as_ref(), author.key.as_ref(), operator.key.as_ref()], bump=operator_treasury_bump)]\r\n  // operator_treasury: UncheckedAccount<'info>,\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from(PREFIX),\r\n        Buffer.from(TREASURY),\r\n        house.toBuffer(),\r\n        author.toBuffer(),\r\n        operator.toBuffer(),\r\n      ],\r\n      HOUSE_PROGRAM_ID,\r\n  );\r\n}\r\n\r\nexport async function getOperatorFeeAccount(house: PublicKey, author: PublicKey, operator: PublicKey) {\r\n  // #[account(mut, seeds=[PREFIX.as_bytes(), FEES.as_bytes(), house.key().as_ref(), author.key.as_ref(), operator.key.as_ref()], bump=operator_fee_bump)]\r\n  // operator_fee_account: UncheckedAccount<'info>,\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from(PREFIX),\r\n        Buffer.from(FEES),\r\n        house.toBuffer(),\r\n        author.toBuffer(),\r\n        operator.toBuffer(),\r\n      ],\r\n      HOUSE_PROGRAM_ID,\r\n  );\r\n}\r\n\r\nexport async function getPlayerAccount(walletKeyPair: AnchorWallet, house: PublicKey, uuid: string) {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n      // @ts-ignore\r\n      [Buffer.from(\"rng_house\"),\r\n        walletKeyPair.publicKey.toBuffer(),\r\n        house.toBuffer(),\r\n        Buffer.from(uuid)],\r\n      HOUSE_PROGRAM_ID\r\n  );\r\n}\r\n\r\nexport function sleep(ms: number): Promise<void> {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport const getUnixTs = () => {\r\n  return new Date().getTime() / 1000;\r\n};\r\n"],"sourceRoot":""}